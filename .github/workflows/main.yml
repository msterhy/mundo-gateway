name: Mundo-Gateway CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'

      - name: Debug SSH Connection
        run: |
          echo "Server User: ${{ secrets.SERVER_USER }}"
          echo "Server Host: ${{ secrets.SERVER_HOST }}"

      - name: Set up Git for private repo access
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"
          echo "GOPRIVATE=github.com/kll-svg/*" >> $GITHUB_ENV
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Install buf tool on the server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e

          # 目标安装路径
          BUF_PATH="/root/local/bin/buf"
          
          # 检查 buf 是否已安装
          if [ -x "\$BUF_PATH" ]; then
            echo "buf 已安装，跳过下载"
            exit 0
          fi
          
          echo "==== 下载并安装 buf ===="
          BUF_VERSION="1.10.0"
          BUF_TAR="/tmp/buf.tar.gz"

          # 下载 buf 压缩包
          curl -sSL -o "\$BUF_TAR" "https://github.com/bufbuild/buf/releases/download/v\$BUF_VERSION/buf-\$BUF_VERSION-linux-amd64.tar.gz"

          # 检查下载是否成功
          if [ ! -f "\$BUF_TAR" ]; then
            echo "buf 下载失败"
            exit 1
          fi

          # 解压缩 buf.tar.gz
          tar -xvzf "\$BUF_TAR" -C /tmp

          # 确保 buf 二进制文件存在
          if [ ! -f "/tmp/buf-\$BUF_VERSION-linux-amd64" ]; then
            echo "buf 解压失败"
            exit 1
          fi

          # 创建目标路径，如果不存在
          sudo mkdir -p \$(dirname "\$BUF_PATH")

          # 移动文件并赋予可执行权限
          sudo mv "/tmp/buf-\$BUF_VERSION-linux-amd64" "\$BUF_PATH"
          sudo chmod +x "\$BUF_PATH"

          echo "buf 安装完成"
          EOF


      - name: Generate pb files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          mkdir -p /root/mundo-gateway && cd /root/mundo-gateway
          buf generate
          EOF

      - name: Install dependencies
        run: go mod tidy

      - name: Build Go application
        run: go build -ldflags "-s -w" -o ./mundo-gateway ./cmd/main.go

      - name: Compress the binary
        run: gzip -k ./mundo-gateway

      # 停止旧的 `mundo-gateway` 容器
      - name: Stop existing Docker containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "==== 停止旧的 mundo-gateway 容器 ===="
          cd /root/mundo-gateway
          docker-compose down || true
          EOF

      # 上传新文件并重启 Docker 容器
      - name: Upload new binary and restart Docker containers
        run: |
          scp -o StrictHostKeyChecking=no ./mundo-gateway.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/root/mundo-gateway/mundo-gateway.gz
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "==== 更新 mundo-gateway 二进制文件 ===="
          cd /root/mundo-gateway
          gunzip -f ./mundo-gateway.gz
          chmod +x ./mundo-gateway
          echo "==== 重新启动 mundo-gateway 容器 ===="
          docker-compose up -d --build
          EOF









