name: Mundo-Gateway CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23'

      - name: Debug SSH Connection
        run: |
          echo "Server User: ${{ secrets.SERVER_USER }}"
          echo "Server Host: ${{ secrets.SERVER_HOST }}"

      - name: Set up Git for private repo access
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"
          echo "GOPRIVATE=github.com/kll-svg/*" >> $GITHUB_ENV

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install buf tool and generate pb files on the server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "==== 检查并安装 buf ===="
          if ! command -v buf &>/dev/null; then
            echo "buf 未安装，开始安装..."
            BUF_VERSION="1.28.1"
            curl -sSL -o "/tmp/buf.tar.gz" "https://github.com/bufbuild/buf/releases/download/v$BUF_VERSION/buf-Linux-x86_64.tar.gz"
            tar -xvzf "/tmp/buf.tar.gz" -C /tmp
            sudo mv "/tmp/buf/bin/buf" /usr/local/bin/buf
            sudo chmod +x /usr/local/bin/buf
            rm -rf /tmp/buf /tmp/buf.tar.gz
            echo "buf 安装完成"
          else
            echo "buf 已安装，跳过安装步骤"
          fi

          echo "==== 生成 Protobuf 文件 ===="
          PROJECT_DIR="/root/mundo-gateway"
          cd "$PROJECT_DIR"
          if [ ! -f "buf.yaml" ]; then
            echo "错误: buf.yaml 文件未找到"
            exit 1
          fi

          buf generate && echo "Protobuf 文件生成成功" || { echo "错误: Protobuf 文件生成失败"; exit 1; }
          EOF

      - name: Install dependencies
        run: go mod tidy

      - name: Build Go application
        run: go build -ldflags "-s -w" -o ./mundo-gateway ./cmd/main.go

      - name: Compress the binary
        run: gzip -k ./mundo-gateway

      - name: Stop existing Docker containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "==== 停止旧的 mundo-gateway 容器 ===="
          cd /root/mundo-gateway
          docker-compose down || true
          EOF

      - name: Upload new binary and restart Docker containers
        run: |
          scp -o StrictHostKeyChecking=no ./mundo-gateway.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/root/mundo-gateway/mundo-gateway.gz
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "==== 更新 mundo-gateway 二进制文件 ===="
          cd /root/mundo-gateway
          gunzip -f ./mundo-gateway.gz
          chmod +x ./mundo-gateway
          echo "==== 重新启动 mundo-gateway 容器 ===="
          docker-compose up -d --build
          EOF









