name: Gateway CI/CD Pipeline

on:
  push:
    branches:
      - master  # 触发 CI/CD 流程的分支，这里是 master 分支

jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 作为运行环境

    steps:
      # 1️⃣ 检出代码
      - name: Checkout code
        uses: actions/checkout@v2  # 使用 GitHub 提供的 checkout Action，检出代码

      # 2️⃣ 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v3  # 使用 setup-go action 设置 Go 环境
        with:
          go-version: '1.23'  # 设置 Go 版本为 1.23

      # 3️⃣ 设置 Git 以访问私有仓库
      - name: Set up Git for private repo access
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"  # 设置 Git 配置，使用 GitHub token 访问私有仓库
          echo "GOPRIVATE=github.com/kll-svg/*" >> $GITHUB_ENV  # 设置 Go 私有仓库访问环境变量
          
      # 6️⃣ 配置 SSH，连接服务器执行 buf generate
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0  # 使用 webfactory/ssh-agent Action 配置 SSH 代理
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # 使用 GitHub Secrets 中存储的 SSH 私钥

      # 🔟 传输编译后的二进制文件和 pb.go 文件到服务器
      - name: Transfer binary and pb.go files to JD Cloud Server
        run: |
          # 传输生成的 pb.go 文件和二进制文件
          scp -C -o StrictHostKeyChecking=no ./mundo.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/root/mundo/  # 传输压缩后的二进制文件
          scp -C -o StrictHostKeyChecking=no ./test/grpcping/v1/*.pb.go ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/root/mundo/  # 传输 pb.go 文件到服务器
      

      # 5️⃣ 安装 Go 依赖（此时 pb.go 已经生成）
      - name: Install dependencies
        run: |
          go mod tidy  # 安装 Go 项目的依赖，确保 Go 项目的依赖不会被误删

      # 7️⃣ 编译 Go 二进制文件
      - name: Build Go application
        run: go build -ldflags "-s -w" -o ./mundo ./cmd/main.go  # 编译 Go 应用程序，生成可执行文件 mundo

      # 8️⃣ 压缩二进制文件
      - name: Compress the binary
        run: gzip -k ./mundo  # 使用 gzip 压缩编译好的二进制文件，生成 .gz 文件

      # 9️⃣ 停止旧进程
      - name: Stop existing mundo service
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e  # 如果有任何命令失败，整个脚本将立即停止
          echo "==== 停止旧进程 ===="
          screen -S mundo -X quit || true  # 如果 mundo 服务在 screen 会话中运行，退出该会话
          pkill -f mundo || true  # 强制结束正在运行的 mundo 进程
          sleep 2  # 等待 2 秒，确保进程已完全关闭
          EOF

     
      # 11️⃣ 启动新进程
      - name: Start new process
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e  # 如果有任何命令失败，整个脚本将立即停止
          echo "==== 启动 mundo 服务 ===="
          cd /root/mundo  # 进入到存放二进制文件的目录
          gunzip -f ./mundo.gz  # 解压缩传输过来的 .gz 文件
          chmod +x ./mundo  # 给解压后的二进制文件赋予执行权限
          screen -dmS mundo bash -c './mundo >> mundo.log 2>&1'  # 使用 screen 启动 mundo 服务并将日志输出到 mundo.log 文件
          echo "==== 部署完成 ===="
          EOF








